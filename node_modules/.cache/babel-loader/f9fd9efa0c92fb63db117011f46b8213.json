{"ast":null,"code":"var _jsxFileName = \"/Users/darina/Documents/GitHub/goit-react-hw-04-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Statistics from \"./Statistics\";\nimport Section from \"./SectionTitle\";\nimport Notification from \"./Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prev => prev + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prev => prev + 1);\n        break;\n\n      case 'bad':\n        setBad(prev => prev + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round(good * 100 / (neutral + bad + good)) || 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: ['good', 'bad', 'neutral'],\n        addFeedback: addFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: countTotalFeedback(),\n        percentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 142\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/darina/Documents/GitHub/goit-react-hw-04-feedback/src/components/App.jsx"],"names":["useState","FeedbackOptions","Statistics","Section","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","addFeedback","option","prev","countTotalFeedback","countPositiveFeedbackPercentage","Math","round"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMY,WAAW,GAAGC,MAAM,IAAI;AAC5B,YAAQA,MAAR;AACE,WAAK,MAAL;AACEN,QAAAA,OAAO,CAACO,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAP;AACA;;AACF,WAAK,SAAL;AACEL,QAAAA,UAAU,CAACK,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAV;AACA;;AACF,WAAK,KAAL;AACEH,QAAAA,MAAM,CAACG,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAN;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,WAAOT,IAAI,GAAGI,GAAP,GAAaF,OAApB;AACD,GAFD;;AAKAQ,EAAAA,+BAA+B,GAAG,MAAM;AACtC,WAAOC,IAAI,CAACC,KAAL,CAAYZ,IAAI,GAAG,GAAR,IAAgBE,OAAO,GAAGE,GAAV,GAAgBJ,IAAhC,CAAX,KAAqD,CAA5D;AACD,GAFD;;AAIE,sBAAQ;AAAA,4BACN,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACA,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,SAAhB,CAA1B;AACE,QAAA,WAAW,EAAEM;AADf;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADM,eAKN,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,gBAA6BG,kBAAkB,kBAC7C,QAAC,UAAD;AAAY,QAAA,IAAI,EAAET,IAAlB;AAAwB,QAAA,OAAO,EAAEE,OAAjC;AAA0C,QAAA,GAAG,EAAEE,GAA/C;AAAoD,QAAA,KAAK,EAAEK,kBAAkB,EAA7E;AAAiF,QAAA,UAAU,EAAEC,+BAA+B;AAA5H;AAAA;AAAA;AAAA;AAAA,cAD6C,gBACwF,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADvI;AAAA;AAAA;AAAA;AAAA,YALM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AASD;;GAvCaX,G;;KAAAA,G","sourcesContent":["import { useState } from \"react\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Statistics from \"./Statistics\";\nimport Section from \"./SectionTitle\";\nimport Notification from \"./Notification\";\n\nexport function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prev => prev + 1);\n        break;\n      case 'neutral':\n        setNeutral(prev => prev + 1);\n        break;\n      case 'bad':\n        setBad(prev => prev + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral; \n  };\n\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100) / (neutral + bad + good)) || 0\n  };\n\n    return (<div>\n      <Section title=\"Please leave feedback\">\n      <FeedbackOptions options={['good', 'bad', 'neutral']}\n        addFeedback={addFeedback} />\n      </Section>\n      <Section title=\"Statistics\">{countTotalFeedback() ?\n        <Statistics good={good} neutral={neutral} bad={bad} total={countTotalFeedback()} percentage={countPositiveFeedbackPercentage()} /> : <Notification message=\"There is no feedback\" />}\n      </Section>\n    </div>)\n  }\n"]},"metadata":{},"sourceType":"module"}